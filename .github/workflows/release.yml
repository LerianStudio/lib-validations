name: release

on:
  push:
    branches:
      - develop
      - main
      - hotfix/v*
    paths-ignore:
      - '.gitignore'
      - '**/*.env'    # Ignora todos os arquivos .env
      - '*.env'       # Ignora .env na raiz
      - '**/*.md'     # Ignora arquivos .md
      - '*.md'        # Ignora .md na raiz
      - '**/*.txt'    # Ignora arquivos .txt
      - '*.txt'       # Ignora .txt na raiz
    tags-ignore:
      - '**'

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  integration_tests:
    name: Integration Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Unit Tests
        shell: bash
        run: make test

  publish_release:
    runs-on: ubuntu-24.04
    needs: integration_tests
    environment:
      name: create_release
    name: Create Release to Plugins
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Certifique-se de obter todo o histórico de git, incluindo tags

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          passphrase: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          git_committer_name: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          git_committer_email: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          ci: false
          semantic_version: 23.0.8
          extra_plugins: |
            conventional-changelog-conventionalcommits@v7.0.2
            @saithodev/semantic-release-backmerge
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false

  build_and_publish:
    runs-on: ubuntu-24.04
    env:
      DOCKERHUB_ORG: lerianstudio
      APP_NAME: auth-app  # Definindo o nome da aplicação como auth-app
    name: Build, Publish Docker Image and Run Trivy
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Garante que todas as tags sejam clonadas
        
      - name: List tags in repository
        run: git tag -l  # Verifica se as tags estão sendo recuperadas corretamente
        
      - name: Get Git tag (Semantic Release version)
        id: get_tag
        run: |
          # Tenta pegar a última tag Git
          GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "dev-${GITHUB_SHA}")
          echo "GIT_TAG=${GIT_TAG}"
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV  # Passa a variável para o ambiente do GitHub Actions
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
        
      - name: Debug git describe
        run: |
          git describe --tags --abbrev=0  # Verifica a última tag dentro do workflow
        
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch,pattern={{branch}}-{{sha}},suffix=-${{ github.sha }}
            type=semver,pattern={{version}},tag=${{ env.GIT_TAG }}
            ${{ github.ref_name }}-${{ env.GIT_TAG }}
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          file: "Dockerfile"  # Usando o Dockerfile na raiz do repositório
          load: true
          tags: ${{ steps.meta.outputs.tags }}
        
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}:${{ env.GIT_TAG }}'
      #     format: 'table'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      #     exit-code: '1'
        
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          file: "Dockerfile"  # Usando o Dockerfile na raiz do repositório
          push: true
          tags: ${{ steps.meta.outputs.tags }}
       
      
      # Update repository and image tag in values.yaml
      - name: Update repository and image tag in values.yaml
        run: |
          REPO="${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}"

          # Usando a tag extraída ou gerada
          echo "tag=${{ needs.publish_release.outputs.release_tag }}" >> $GITHUB_OUTPUT

          # Atualizando a tag no values.yaml
          sed -i'' "s|repository: .*|repository: $REPO|" deploy/values.yaml
          sed -i'' "s|tag: .*|tag: ${{ needs.publish_release.outputs.release_tag }}|" deploy/values.yaml

          # Commitando mudanças
          git add deploy/values.yaml
          git commit -m "Update image repository and tag" || echo "No changes to values.yaml"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKERHUB_ORG: lerianstudio
          APP_NAME: auth-app    
  
  start_runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    needs: publish_release
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials - devops
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GH_OICD_TERRAFORM_ROLE }}
          aws-region: 'us-east-2'
          role-session-name: GITHUB-ACTIONS-RUNNER-SESSION-DEVOPS

      - name: Configure AWS credentials - control-plane-dev
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::891377226668:role/terraform-devops-assume-admin-control-plane-dev-role'
          aws-region: 'us-east-2'
          role-session-name: GITHUB-ACTIONS-EC2-RUNNER-SESSION
          role-chaining: true
          role-skip-session-tagging: true

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.MANAGE_TOKEN }}
          ec2-image-id: 'ami-09d3a25ec0fe7ca29'
          ec2-instance-type: t3.medium
          subnet-id: 'subnet-02aec8542c3fd3693'
          security-group-id:  'sg-0b88268be19033d72'
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ] 

  

  argocd:
    needs: [start_runner, build_and_publish]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          
      # Install Helm
      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.9.1-linux-amd64.tar.gz -o helm-v3.9.1-linux-amd64.tar.gz
          tar -zxvf helm-v3.9.1-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Run helm dependency update
        run: |
          echo "::info::Running helm dependency update for application '$APP_NAME'."
          cd deploy
          helm dependency update

      # Commit and push the .tgz file
      - name: Commit and push .tgz file
        run: |
          cd deploy/charts/
          if ! git ls-files --error-unmatch *.tgz > /dev/null 2>&1; then
            git add *.tgz
            git commit -m "Add generated .tgz file"
            git push
          else
            echo ".tgz file already committed. Skipping commit and push."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Login and Add repo if not exists
      - name: Login to ArgoCD
        run: |
          export HOME=/argocd
          argocd login argocd.private.dev.midaz.io --username ${{ secrets.ARGOCD_ADMIN_USERNAME }} --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }}

      - name: Check if application exists
        id: check-app
        continue-on-error: true
        run: |
          export HOME=/argocd
          argocd login argocd.private.dev.midaz.io --username ${{ secrets.ARGOCD_ADMIN_USERNAME }} --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} --insecure
          APP_NAME=${{ github.event.repository.name }}
          if argocd app get $APP_NAME; then
            echo "::set-output name=app_exists::true"
          else
            echo "::set-output name=app_exists::false"
          fi

      - name: Create Application in ArgoCD (if not exists)
        run: |
          APP_NAME=${{ github.event.repository.name }}
          export HOME=/argocd  
          if [[ "${{ steps.check-app.outputs.APP_EXISTS }}" == "false" ]]; then
            echo "::info::Creating application '$APP_NAME' in ArgoCD."
            argocd app create $APP_NAME \
              --repo https://github.com/${{ github.repository }}.git \
              --path deploy \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace default \
              --sync-policy automated \
              --revision develop \
              --values values.yaml
          else
            echo "::notice::Skipping application creation. '$APP_NAME' already exists."
          fi
  
  stop_runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start_runner
      - argocd
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials - devops
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GH_OICD_TERRAFORM_ROLE }}
          aws-region: 'us-east-2'
          role-session-name: GITHUB-ACTIONS-RUNNER-SESSION-DEVOPS

      - name: Configure AWS credentials - control-plane-dev
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::891377226668:role/terraform-devops-assume-admin-control-plane-dev-role'
          aws-region: 'us-east-2'
          role-session-name: GITHUB-ACTIONS-EC2-RUNNER-SESSION
          role-chaining: true
          role-skip-session-tagging: true

      - name: Stop EC2 runner
        id: stop-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          label: ${{ needs.start_runner.outputs.label }}
